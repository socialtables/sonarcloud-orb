description: "Run SonarCloud scanning (node.js projects only). This should be the last command in the job that invokes it."

parameters:
  project-key:
    type: string
  organization:
    type: string
    default: socialtables
  host-url:
    type: string
    default: https://sonarcloud.io/
  scm-revision:
    type: env_var_name
    default: CIRCLE_SHA1
  scm-branch-name:
    type: env_var_name
    default: CIRCLE_BRANCH
  github-pr-url:
    type: env_var_name
    default: CIRCLE_PULL_REQUEST
  build-string:
    type: env_var_name
    default: CIRCLE_BUILD_URL
  sonar-login:
    type: env_var_name
    default: SONARCLOUD_TOKEN
  github-project-slug:
    type: string
  github-username:
    type: string
    default: socialtables-deployer
  github-api-token:
    type: env_var_name
    default: GITHUB_SOCIALTABLES_DEPLOYER_TOKEN
  misc-scanner-args:
    description: This is an escape hatch that allows you to pass in arbitrary args, as-is, to the SonarScanner CLI
    type: string
    default: ""
  coverage-paths:
    description: Space-delimited list of globs or relative paths to coverage data files (LCOV) for JavaScript
    type: string
    default: "**/lcov.info"
  test-report-paths:
    type: string
    description: Space-delimited list of globs or relative paths to test execution data files (Sonar Generic Test Data format)
    default: "**/sonar-report.xml"
  eslint-report-paths:
    type: string
    description: Space-delimited list of globs or relative paths to eslint result files.
    default: "**/results.eslint.json"
  stylelint-report-paths:
    type: string
    description: Space-delimited list of globs or relative paths to stylelint result files.
    default: "**/results.stylelint.json"
  covered-code-language:
    description: Language of code to cover
    type: enum
    enum:
      - javascript
      - typescript
    default: javascript
  project-version:
    description: Your project's version identifier (uses package.json version by default)
    type: string
    default: ""
steps:
  - build-tools/ensure-command:
      command: sonar-scanner
  - run:
      name: "SonarCloud: Scan"
      command: |
        shopt -s nullglob globstar
        GLOBIGNORE="**/node_modules/**:node_modules/**:**/node_modules"

        SONAR_PROJECT_KEY="$parameters__PROJECT_KEY"
        SONAR_ORGANIZATION="$parameters__ORGANIZATION"
        SONAR_HOST_URL="$parameters__HOST_URL"
        SONAR_SCM_REVISION="${parameters__SCM_REVISION}"
        SONAR_BUILD_STRING="${parameters__BUILD_STRING}"
        SONAR_LOGIN="${parameters__SONAR_LOGIN}"
        GITHUB_PROJECT_SLUG="$parameters__GITHUB_PROJECT_SLUG"
        GITHUB_USERNAME="$parameters__GITHUB_USERNAME"
        GITHUB_API_TOKEN="${parameters__GITHUB_API_TOKEN}"
        LCOV_FILES=($parameters__COVERAGE_PATHS)
        TEST_RESULTS_FILES=($parameters__TEST_REPORT_PATHS)
        ESLINT_RESULTS_FILES=($parameters__ESLINT_REPORT_PATHS)
        STYLELINT_RESULTS_FILES=($parameters__STYLELINT_REPORT_PATHS)
        SONAR_COVERAGE_PLUGIN="$parameters__COVERED_CODE_LANGUAGE"
        SCM_BRANCH_NAME="${parameters__SCM_BRANCH_NAME}"
        GITHUB_PR_URL="${parameters__GITHUB_PR_URL}"
        PROJECT_VERSION_PARAM="$parameters__PROJECT_VERSION"

        GITHUB_API_CREDENTIAL="$GITHUB_USERNAME:$GITHUB_API_TOKEN"
        SONAR_PROJECT_VERSION="${PROJECT_VERSION_PARAM:-$(cat package.json | jq -r '.version')}"

        SONAR_SCANNER_ARGS=()

        if [ "$GITHUB_PR_URL" ]; then
          echo "USING PR: $GITHUB_PR_URL"
          SONAR_PR_KEY=$(basename $GITHUB_PR_URL)

          echo "SONAR_PR_KEY: $SONAR_PR_KEY"
          PR_BASE_BRANCH=$(curl -u "$GITHUB_API_CREDENTIAL" https://api.github.com/repos/$GITHUB_PROJECT_SLUG/pulls/$SONAR_PR_KEY | jq -r '.base.ref')
          echo "PR_BASE_BRANCH: $PR_BASE_BRANCH"

          SONAR_SCANNER_ARGS+=( \
            -Dsonar.pullrequest.base=${PR_BASE_BRANCH} \
            -Dsonar.pullrequest.branch=${SCM_BRANCH_NAME} \
            -Dsonar.pullrequest.key=${SONAR_PR_KEY} \
          )

          git branch -f $PR_BASE_BRANCH origin/$PR_BASE_BRANCH

        else
          if [ "$SCM_BRANCH_NAME" ]; then
            GITHUB_DEFAULT_BRANCH=$( curl -u "$GITHUB_API_CREDENTIAL" https://api.github.com/repos/$GITHUB_PROJECT_SLUG | jq -r '.default_branch')
            echo "GITHUB_DEFAULT_BRANCH: $GITHUB_DEFAULT_BRANCH"

            SONAR_SCANNER_ARGS+=( -Dsonar.branch.name=$SCM_BRANCH_NAME )

            if [ "$SCM_BRANCH_NAME" != "$GITHUB_DEFAULT_BRANCH" ]; then
              SONAR_SCANNER_ARGS+=( -Dsonar.branch.target=${GITHUB_DEFAULT_BRANCH} )

              git branch -f $GITHUB_DEFAULT_BRANCH origin/$GITHUB_DEFAULT_BRANCH
            fi
          fi
        fi

        function toCSV { local IFS=","; echo "$*"; }

        if [ ${#LCOV_FILES[@]} -gt 0 ]; then
          SONAR_SCANNER_ARGS+=( \
            -Dsonar.$SONAR_COVERAGE_PLUGIN.lcov.reportPaths="$(toCSV ${LCOV_FILES[@]})" \
          )
        fi

        if [ ${#TEST_RESULTS_FILES[@]} -gt 0 ]; then
          SONAR_SCANNER_ARGS+=( \
            -Dsonar.testExecutionReportPaths="$(toCSV $TEST_RESULTS_FILES)" \
          )
        fi

        if [ ${#ESLINT_RESULTS_FILES[@]} -gt 0 ]; then
          SONAR_SCANNER_ARGS+=( \
            -Dsonar.eslint.reportPaths="$(toCSV $ESLINT_RESULTS_FILES)" \
          )
        fi

        if [ ${#STYLELINT_RESULTS_FILES[@]} -gt 0 ]; then
          SONAR_SCANNER_ARGS+=( \
            -Dsonar.css.stylelint.reportPaths="$(toCSV $STYLELINT_RESULTS_FILES)" \
          )
        fi

        SONAR_SCANNER_ARGS+=( \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.organization="$SONAR_ORGANIZATION" \
          -Dsonar.buildString="$SONAR_BUILD_STRING" \
          -Dsonar.scm.revision="$SONAR_SCM_REVISION" \
          -Dsonar.projectKey="$SONAR_PROJECT_KEY" \
          -Dsonar.projectVersion="$SONAR_PROJECT_VERSION"
        )

        # exclude login here for security reasons
        echo "SONAR_SCANNER_ARGS:"
        printf "%s\n" "${SONAR_SCANNER_ARGS[@]}"

        SONAR_SCANNER_ARGS+=( -Dsonar.login="$SONAR_LOGIN" )

        export SONAR_SCANNER_OPTS="-server"
        sonar-scanner ${SONAR_SCANNER_ARGS[*]}
      when: always
