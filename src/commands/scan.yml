description: "Run SonarCloud scanning (node.js projects only). This should be the last command in the job that invokes it."

parameters:
  project-key:
    type: string
  organization:
    type: string
    default: socialtables
  host-url:
    type: string
    default: https://sonarcloud.io/
  scm-revision:
    type: env_var_name
    default: CIRCLE_SHA1
  scm-branch-name:
    type: env_var_name
    default: CIRCLE_BRANCH
  github-pr-url:
    type: env_var_name
    default: CIRCLE_PULL_REQUEST
  build-string:
    type: env_var_name
    default: CIRCLE_BUILD_URL
  sonar-login:
    type: env_var_name
    default: SONARCLOUD_TOKEN
  github-project-slug:
    type: string
  github-username:
    type: string
    default: socialtables-deployer
  github-api-token:
    type: env_var_name
    default: GITHUB_SOCIALTABLES_DEPLOYER_TOKEN
  misc-scanner-args:
    description: This is an escape hatch that allows you to pass in arbitrary args, as-is, to the SonarScanner CLI
    type: string
    default: ""
  coverage-paths:
    description: Space-delimited list of globs or relative paths to coverage data files (LCOV) for JavaScript
    type: string
    default: "**/**/lcov.info"
  test-report-paths:
    type: string
    description: Space-delimited list of globs or relative paths to test execution data files (Sonar Generic Test Data format)
    default: "**/**/sonar-report.xml"
  covered-code-language:
    description: Language of code to cover
    type: enum
    enum:
      - javascript
      - typescript
    default: javascript
  project-version:
    description: Your project's version identifier (uses package.json version by default)
    type: string
    default: ""
steps:
  - build-tools/ensure-command:
      command: sonar-scanner
  - run:
      name: "SonarCloud: Scan"
      command: |
        SONAR_PROJECT_KEY="<<parameters.project-key>>"
        SONAR_ORGANIZATION="<<parameters.organization>>"
        SONAR_HOST_URL="<<parameters.host-url>>"
        SONAR_SCM_REVISION="${<<parameters.scm-revision>>}"
        SONAR_BUILD_STRING="${<<parameters.build-string>>}"
        SONAR_LOGIN="${<<parameters.sonar-login>>}"
        GITHUB_PROJECT_SLUG="<<parameters.github-project-slug>>"
        GITHUB_USERNAME="<<parameters.github-username>>"
        GITHUB_API_TOKEN="${<<parameters.github-api-token>>}"
        LCOV_FILES=("<<parameters.coverage-paths>>")
        TEST_RESULTS_FILES=("<<parameters.test-report-paths>>")
        SONAR_COVERAGE_PLUGIN="<<parameters.covered-code-language>>"
        SCM_BRANCH_NAME="${<<parameters.scm-branch-name>>}"
        GITHUB_PR_URL="${<<parameters.github-pr-url>>}"
        PROJECT_VERSION_PARAM="<<parameters.project-version>>"

        GITHUB_API_CREDENTIAL="$GITHUB_USERNAME:$GITHUB_API_TOKEN"
        SONAR_PROJECT_VERSION="${PROJECT_VERSION_PARAM:-$(cat package.json | jq -r '.version')}"

        SONAR_SCANNER_ARGS=()

        if [ "$GITHUB_PR_URL" ]; then
          echo "USING PR: $GITHUB_PR_URL"
          SONAR_PR_KEY=$(basename $GITHUB_PR_URL)

          echo "SONAR_PR_KEY: $SONAR_PR_KEY"
          PR_BASE_BRANCH=$(curl -u "$GITHUB_API_CREDENTIAL" https://api.github.com/repos/$GITHUB_PROJECT_SLUG/pulls/$SONAR_PR_KEY | jq -r '.base.ref')
          echo "PR_BASE_BRANCH: $PR_BASE_BRANCH"

          SONAR_SCANNER_ARGS+=( \
            -Dsonar.pullrequest.base=${PR_BASE_BRANCH} \
            -Dsonar.pullrequest.branch=${SCM_BRANCH_NAME} \
            -Dsonar.pullrequest.key=${SONAR_PR_KEY} \
          )

          git branch -f $PR_BASE_BRANCH origin/$PR_BASE_BRANCH

        else
          if [ "$SCM_BRANCH_NAME" ]; then
            GITHUB_DEFAULT_BRANCH=$( curl -u "$GITHUB_API_CREDENTIAL" https://api.github.com/repos/$GITHUB_PROJECT_SLUG | jq -r '.default_branch')
            echo "GITHUB_DEFAULT_BRANCH: $GITHUB_DEFAULT_BRANCH"

            SONAR_SCANNER_ARGS+=( -Dsonar.branch.name=$SCM_BRANCH_NAME )

            if [ "$SCM_BRANCH_NAME" != "$GITHUB_DEFAULT_BRANCH" ]; then
              SONAR_SCANNER_ARGS+=( -Dsonar.branch.target=${GITHUB_DEFAULT_BRANCH} )

              git branch -f $GITHUB_DEFAULT_BRANCH origin/$GITHUB_DEFAULT_BRANCH
            fi
          fi
        fi

        function toCSV { local IFS=","; echo "$*"; }

        SONAR_SCANNER_ARGS+=( \
          -Dsonar.host.url="$SONAR_HOST_URL" \
          -Dsonar.organization="$SONAR_ORGANIZATION" \
          -Dsonar.buildString="$SONAR_BUILD_STRING" \
          -Dsonar.scm.revision="$SONAR_SCM_REVISION" \
          -Dsonar.projectKey="$SONAR_PROJECT_KEY" \
          -Dsonar.projectVersion="$SONAR_PROJECT_VERSION" \
          -Dsonar.$SONAR_COVERAGE_PLUGIN.lcov.reportPaths="$(toCSV $LCOV_FILES)" \
          -Dsonar.testExecutionReportPaths="$(toCSV $TEST_RESULTS_FILES)" \
        )

        # exclude login here for security reasons
        echo "SONAR_SCANNER_ARGS -> ${SONAR_SCANNER_ARGS[*]}"

        SONAR_SCANNER_ARGS+=( -Dsonar.login="$SONAR_LOGIN" )

        export SONAR_SCANNER_OPTS="-server"
        sonar-scanner ${SONAR_SCANNER_ARGS[*]}
      when: always
